%% WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
%% See https://github.com/jkakar/aws-codegen for more details.

%% @doc <fullname>Amazon Inspector</fullname>
%%
%% Amazon Inspector enables you to analyze the behavior of your AWS resources
%% and to identify potential security issues. For more information, see <a
%% href="https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html">
%% Amazon Inspector User Guide</a>.
-module(aws_inspector).

-export([add_attributes_to_findings/2,
         add_attributes_to_findings/3,
         create_assessment_target/2,
         create_assessment_target/3,
         create_assessment_template/2,
         create_assessment_template/3,
         create_resource_group/2,
         create_resource_group/3,
         delete_assessment_run/2,
         delete_assessment_run/3,
         delete_assessment_target/2,
         delete_assessment_target/3,
         delete_assessment_template/2,
         delete_assessment_template/3,
         describe_assessment_runs/2,
         describe_assessment_runs/3,
         describe_assessment_targets/2,
         describe_assessment_targets/3,
         describe_assessment_templates/2,
         describe_assessment_templates/3,
         describe_cross_account_access_role/2,
         describe_cross_account_access_role/3,
         describe_findings/2,
         describe_findings/3,
         describe_resource_groups/2,
         describe_resource_groups/3,
         describe_rules_packages/2,
         describe_rules_packages/3,
         get_telemetry_metadata/2,
         get_telemetry_metadata/3,
         list_assessment_run_agents/2,
         list_assessment_run_agents/3,
         list_assessment_runs/2,
         list_assessment_runs/3,
         list_assessment_targets/2,
         list_assessment_targets/3,
         list_assessment_templates/2,
         list_assessment_templates/3,
         list_event_subscriptions/2,
         list_event_subscriptions/3,
         list_findings/2,
         list_findings/3,
         list_rules_packages/2,
         list_rules_packages/3,
         list_tags_for_resource/2,
         list_tags_for_resource/3,
         preview_agents/2,
         preview_agents/3,
         register_cross_account_access_role/2,
         register_cross_account_access_role/3,
         remove_attributes_from_findings/2,
         remove_attributes_from_findings/3,
         set_tags_for_resource/2,
         set_tags_for_resource/3,
         start_assessment_run/2,
         start_assessment_run/3,
         stop_assessment_run/2,
         stop_assessment_run/3,
         subscribe_to_event/2,
         subscribe_to_event/3,
         unsubscribe_from_event/2,
         unsubscribe_from_event/3,
         update_assessment_target/2,
         update_assessment_target/3]).

-include_lib("hackney/include/hackney_lib.hrl").

%%====================================================================
%% API
%%====================================================================

%% @doc Assigns attributes (key and value pair) to the findings specified by
%% the findings' ARNs.
add_attributes_to_findings(Client, Input)
  when is_map(Client), is_map(Input) ->
    add_attributes_to_findings(Client, Input, []).
add_attributes_to_findings(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"AddAttributesToFindings">>, Input, Options).

%% @doc Creates a new assessment target using the resource group ARN
%% generated by <a>CreateResourceGroup</a>. You can create up to 50
%% assessment targets per AWS account. You can run up to 500 concurrent
%% agents per AWS account. For more information, see <a
%% href="https://docs.aws.amazon.com/inspector/latest/userguide//inspector_applications.html">
%% Amazon Inspector Assessment Targets</a>.
create_assessment_target(Client, Input)
  when is_map(Client), is_map(Input) ->
    create_assessment_target(Client, Input, []).
create_assessment_target(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"CreateAssessmentTarget">>, Input, Options).

%% @doc Creates an assessment template for the assessment target specified by
%% the assessment target ARN.
create_assessment_template(Client, Input)
  when is_map(Client), is_map(Input) ->
    create_assessment_template(Client, Input, []).
create_assessment_template(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"CreateAssessmentTemplate">>, Input, Options).

%% @doc Creates a resource group using the specified set of tags (key and
%% value pairs) that are used to select the EC2 instances to be included in
%% an Inspector assessment target. The created resource group is then used to
%% create an Inspector assessment target.
create_resource_group(Client, Input)
  when is_map(Client), is_map(Input) ->
    create_resource_group(Client, Input, []).
create_resource_group(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"CreateResourceGroup">>, Input, Options).

%% @doc Deletes the assessment run specified by the assessment run ARN.
delete_assessment_run(Client, Input)
  when is_map(Client), is_map(Input) ->
    delete_assessment_run(Client, Input, []).
delete_assessment_run(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DeleteAssessmentRun">>, Input, Options).

%% @doc Deletes the assessment target specified by the assessment target ARN.
delete_assessment_target(Client, Input)
  when is_map(Client), is_map(Input) ->
    delete_assessment_target(Client, Input, []).
delete_assessment_target(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DeleteAssessmentTarget">>, Input, Options).

%% @doc Deletes the assessment template specified by the assessment template
%% ARN.
delete_assessment_template(Client, Input)
  when is_map(Client), is_map(Input) ->
    delete_assessment_template(Client, Input, []).
delete_assessment_template(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DeleteAssessmentTemplate">>, Input, Options).

%% @doc Describes the assessment run(s) specified by the assessment run
%% ARN(s).
describe_assessment_runs(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_assessment_runs(Client, Input, []).
describe_assessment_runs(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeAssessmentRuns">>, Input, Options).

%% @doc Describes the assessment target(s) specified by the assessment target
%% ARN(s).
describe_assessment_targets(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_assessment_targets(Client, Input, []).
describe_assessment_targets(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeAssessmentTargets">>, Input, Options).

%% @doc Describes the assessment template(s) specified by the assessment
%% template(s) ARN(s).
describe_assessment_templates(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_assessment_templates(Client, Input, []).
describe_assessment_templates(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeAssessmentTemplates">>, Input, Options).

%% @doc Describes the IAM role that enables Inspector to access your AWS
%% account.
describe_cross_account_access_role(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_cross_account_access_role(Client, Input, []).
describe_cross_account_access_role(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeCrossAccountAccessRole">>, Input, Options).

%% @doc Describes the finding(s) specified by the finding ARN(s).
describe_findings(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_findings(Client, Input, []).
describe_findings(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeFindings">>, Input, Options).

%% @doc Describes resource group(s) specified by the resource group ARN(s).
describe_resource_groups(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_resource_groups(Client, Input, []).
describe_resource_groups(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeResourceGroups">>, Input, Options).

%% @doc Describes the rules package(s) specified by the rules package ARN(s).
describe_rules_packages(Client, Input)
  when is_map(Client), is_map(Input) ->
    describe_rules_packages(Client, Input, []).
describe_rules_packages(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"DescribeRulesPackages">>, Input, Options).

%% @doc Information about the data collected for the specified assessment
%% run.
get_telemetry_metadata(Client, Input)
  when is_map(Client), is_map(Input) ->
    get_telemetry_metadata(Client, Input, []).
get_telemetry_metadata(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"GetTelemetryMetadata">>, Input, Options).

%% @doc Lists the agents of the assessment run specified by the assessment
%% run ARN.
list_assessment_run_agents(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_assessment_run_agents(Client, Input, []).
list_assessment_run_agents(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListAssessmentRunAgents">>, Input, Options).

%% @doc Lists the assessments run corresponding to assessment template(s)
%% specified by the assessment template(s)' ARN(s).
list_assessment_runs(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_assessment_runs(Client, Input, []).
list_assessment_runs(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListAssessmentRuns">>, Input, Options).

%% @doc Lists the ARN(s) of the assessment target(s) within this AWS account.
%% For more information about assessment targets, see <a
%% href="https://docs.aws.amazon.com/inspector/latest/userguide//inspector_applications.html">Amazon
%% Inspector Assessment Targets</a>.
list_assessment_targets(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_assessment_targets(Client, Input, []).
list_assessment_targets(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListAssessmentTargets">>, Input, Options).

%% @doc Lists the assessment template(s) corresponding to the assessment
%% target(s) specified by the assessment targets' ARN(s).
list_assessment_templates(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_assessment_templates(Client, Input, []).
list_assessment_templates(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListAssessmentTemplates">>, Input, Options).

%% @doc Lists all the event subscriptions for the assessment template
%% specified by the assessment template ARN. For more information, see
%% <a>SubscribeToEvent</a> and <a>UnsubscribeFromEvent</a>.
list_event_subscriptions(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_event_subscriptions(Client, Input, []).
list_event_subscriptions(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListEventSubscriptions">>, Input, Options).

%% @doc Lists findings generated by the assessment run(s) specified by the
%% assessment run ARN(s).
list_findings(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_findings(Client, Input, []).
list_findings(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListFindings">>, Input, Options).

%% @doc Lists all available Inspector rules packages.
list_rules_packages(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_rules_packages(Client, Input, []).
list_rules_packages(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListRulesPackages">>, Input, Options).

%% @doc Lists all tags associated with an assessment template.
list_tags_for_resource(Client, Input)
  when is_map(Client), is_map(Input) ->
    list_tags_for_resource(Client, Input, []).
list_tags_for_resource(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"ListTagsForResource">>, Input, Options).

%% @doc Previews the agents installed on the EC2 instances that are part of
%% the specified assessment target.
preview_agents(Client, Input)
  when is_map(Client), is_map(Input) ->
    preview_agents(Client, Input, []).
preview_agents(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"PreviewAgents">>, Input, Options).

%% @doc Registers the IAM role that Inspector uses to list your EC2 instances
%% at the start of the assessment run or when you call the
%% <a>PreviewAgents</a> action.
register_cross_account_access_role(Client, Input)
  when is_map(Client), is_map(Input) ->
    register_cross_account_access_role(Client, Input, []).
register_cross_account_access_role(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"RegisterCrossAccountAccessRole">>, Input, Options).

%% @doc Removes entire attributes (key and value pairs) from the findings
%% specified by the finding ARNs where an attribute with the specified key
%% exists.
remove_attributes_from_findings(Client, Input)
  when is_map(Client), is_map(Input) ->
    remove_attributes_from_findings(Client, Input, []).
remove_attributes_from_findings(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"RemoveAttributesFromFindings">>, Input, Options).

%% @doc Sets tags (key and value pairs) to the assessment template specified
%% by the assessment template ARN.
set_tags_for_resource(Client, Input)
  when is_map(Client), is_map(Input) ->
    set_tags_for_resource(Client, Input, []).
set_tags_for_resource(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"SetTagsForResource">>, Input, Options).

%% @doc Starts the assessment run specified by the assessment template ARN.
%% For this API to function properly, you must not exceed the limit of
%% running up to 500 concurrent agents per AWS account.
start_assessment_run(Client, Input)
  when is_map(Client), is_map(Input) ->
    start_assessment_run(Client, Input, []).
start_assessment_run(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"StartAssessmentRun">>, Input, Options).

%% @doc Stops the assessment run specified by the assessment run ARN.
stop_assessment_run(Client, Input)
  when is_map(Client), is_map(Input) ->
    stop_assessment_run(Client, Input, []).
stop_assessment_run(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"StopAssessmentRun">>, Input, Options).

%% @doc Enables the process of sending Amazon Simple Notification Service
%% (SNS) notifications about a specified event to a specified topic.
subscribe_to_event(Client, Input)
  when is_map(Client), is_map(Input) ->
    subscribe_to_event(Client, Input, []).
subscribe_to_event(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"SubscribeToEvent">>, Input, Options).

%% @doc Disables the process of sending Amazon Simple Notification Service
%% (SNS) notifications about a specified event to a specified topic.
unsubscribe_from_event(Client, Input)
  when is_map(Client), is_map(Input) ->
    unsubscribe_from_event(Client, Input, []).
unsubscribe_from_event(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"UnsubscribeFromEvent">>, Input, Options).

%% @doc Updates the assessment target specified by the assessment target ARN.
update_assessment_target(Client, Input)
  when is_map(Client), is_map(Input) ->
    update_assessment_target(Client, Input, []).
update_assessment_target(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"UpdateAssessmentTarget">>, Input, Options).

%%====================================================================
%% Internal functions
%%====================================================================

-spec request(aws_client:aws_client(), binary(), map(), list()) ->
    {ok, Result, {integer(), list(), hackney:client()}} |
    {error, Error, {integer(), list(), hackney:client()}} |
    {error, term()} when
    Result :: map() | undefined,
    Error :: {binary(), binary()}.
request(Client, Action, Input, Options) ->
    Client1 = Client#{service => <<"inspector">>},
    Host = get_host(<<"inspector">>, Client1),
    URL = get_url(Host, Client1),
    Headers = [{<<"Host">>, Host},
               {<<"Content-Type">>, <<"application/x-amz-json-1.1">>},
               {<<"X-Amz-Target">>, << <<"InspectorService.">>/binary, Action/binary>>}],
    Payload = jsx:encode(Input),
    Headers1 = aws_request:sign_request(Client1, <<"POST">>, URL, Headers, Payload),
    Response = hackney:request(post, URL, Headers1, Payload, Options),
    handle_response(Response).

handle_response({ok, 200, ResponseHeaders, Client}) ->
    case hackney:body(Client) of
        {ok, <<>>} ->
            {ok, undefined, {200, ResponseHeaders, Client}};
        {ok, Body} ->
            Result = jsx:decode(Body, [return_maps]),
            {ok, Result, {200, ResponseHeaders, Client}}
    end;
handle_response({ok, StatusCode, ResponseHeaders, Client}) ->
    {ok, Body} = hackney:body(Client),
    Error = jsx:decode(Body, [return_maps]),
    Exception = maps:get(<<"__type">>, Error, undefined),
    Reason = maps:get(<<"message">>, Error, undefined),
    {error, {Exception, Reason}, {StatusCode, ResponseHeaders, Client}};
handle_response({error, Reason}) ->
    {error, Reason}.

get_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;
get_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix,
			  <<".">>,
			  Region,
			  <<".">>,
			  Endpoint],
			 <<"">>).

get_url(Host, Client) ->
    Proto = maps:get(proto, Client),
    Port = maps:get(port, Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, <<"/">>],
			 <<"">>).
